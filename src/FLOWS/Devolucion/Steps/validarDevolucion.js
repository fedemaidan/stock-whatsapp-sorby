const FlowManager = require('../../../FlowControl/FlowManager');
const opciondevMateriales = require('../../../Utiles/Chatgpt/Operaciones/opciondevMateriales');

module.exports = async function validarDevolucion(userId, message, sock) {
    try {
        const flowData = FlowManager.userFlows[userId]?.flowData;

        // Validamos que haya pedido original
        if (!flowData?.data?.pedidoOriginal || flowData.data.pedidoOriginal.length === 0) {
            await sock.sendMessage(userId, { text: '‚ùå No se encontraron datos del pedido original. Reinici√° el proceso.' });
            return FlowManager.resetFlow(userId);
        }

        // üîç Usamos GPT para interpretar los materiales que quiere devolver
        const resultado = await opciondevMateriales(message, flowData.data);

        // Validaci√≥n b√°sica
        if (!resultado || !Array.isArray(resultado.devolucion) || resultado.devolucion.length === 0) {
            await sock.sendMessage(userId, {
                text: "‚ö†Ô∏è No pude interpretar correctamente los materiales que quer√©s devolver. Intent√° escribirlo de nuevo, por ejemplo:\n\nCemento 5, Arena 10"
            });
            return;
        }

        // Guardamos en flowData
        flowData.data.devolucion = resultado.devolucion;

        // Mensaje de confirmaci√≥n de interpretaci√≥n
        let mensaje = `‚úÖ Estos son los materiales detectados para devoluci√≥n:\n`;
        resultado.devolucion.forEach((item, i) => {
            mensaje += `\n${i + 1}. *${item.nombre}* ‚Äî Cantidad: ${item.cantidad}`;
        });

        // Guardamos el flow
        FlowManager.setFlow(userId, "DEVOLUCION", "AsignarOrigenDevolucion", flowData);

        // Enviamos al usuario
        await sock.sendMessage(userId, { text: mensaje });

         //-----------------------------------------------
 const { devolucion, pedidoOriginal } = flowData.data;
const materialActual = devolucion[0];

        // ‚úÖ Recolectar todas las obras √∫nicas del pedido original
        const todasLasObras = new Set();

        pedidoOriginal.forEach(item => {
            (item.obrasDisponibles || []).forEach(obraNombre => {
                todasLasObras.add(obraNombre);
            });
        });

        // ‚úÖ Agregar FlyDac si no est√°
        if (!todasLasObras.has('FlyDac')) {
            todasLasObras.add('FlyDac');
        }

        // ‚úâÔ∏è Armar el mensaje
        let mensajeIntro = `üìç *¬øD√≥nde quer√©s devolver el siguiente material?*\n\n`;
        mensajeIntro += `üîπ *${materialActual.nombre}* ‚Äî Cantidad: ${materialActual.cantidad}\n\n`;

        if (todasLasObras.size === 0) {
            mensajeIntro += `‚ö†Ô∏è No se detectaron obras asociadas al pedido original.`;
        } else {
            mensajeIntro += `üèóÔ∏è Obras disponibles:\n`;
            mensajeIntro += Array.from(todasLasObras).map(o => `‚Ä¢ ${o}`).join('\n');
        }


await sock.sendMessage(userId, { text: mensajeIntro });
//--------------------------------------------------

    } catch (error) {
        console.error("‚ùå Error en ValidarDevolucion:", error);
        await sock.sendMessage(userId, { text: '‚ùå Hubo un problema al procesar la devoluci√≥n. Intent√° nuevamente.' });
        FlowManager.resetFlow(userId);
    }
};
